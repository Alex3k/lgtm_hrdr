enterprise: 
  enabled: true
  adminApi:
    enabled: true
  useExternalLicense: true
  externalLicenseName: gel-secrets
  tokengen:
    enabled: false
  config: |
    admin_client:
      storage:
        gcs:
          bucket_name: ${bucket_name}
    auth:
      type: enterprise
      override:
        token: ${gel_tokengen_override}
      admin:
        oidc:
          issuer_url: ${oidc_issuer_url}
          access_policy_claim: "${oidc_access_policy_claim}"
          access_policy_regex: "(.*)"
    auth_enabled: true
    cluster_name: ${gel_cluster_name}
    license:
      path: /etc/gel_secrets/license.jwt
  image:
    tag: "v1.5.0"

loki:
  authEnabled: true

  commonConfig:
    path_prefix: /var/loki
    replication_factor: 3

  storage:
    type: gcs
    bucketNames:
      chunks: ${bucket_name}
      ruler: ${bucket_name}
      admin: ${bucket_name}

minio:
  enabled: false

write:
  replicas: 3
  extraEnv:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/gel_secrets/gcp_service_account.json"
  extraVolumeMounts:
    - name: gel-secrets
      mountPath: "/etc/gel_secrets"
  extraVolumes:
    - name: gel-secrets
      secret:
        secretName: gel-secrets
        items:
        - key: gel_license.jwt
          path: license.jwt
        - key: gcp_service_account.json
          path: gcp_service_account.json
  affinity: |
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - gel_write
          topologyKey: topology.kubernetes.io/zone

read:
  replicas: 3
  extraEnv:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/gel_secrets/gcp_service_account.json"
  extraVolumeMounts:
    - name: gel-secrets
      mountPath: "/etc/gel_secrets"
  extraVolumes:
    - name: gel-secrets
      secret:
        secretName: gel-secrets
        items:
        - key: gel_license.jwt
          path: license.jwt
        - key: gcp_service_account.json
          path: gcp_service_account.json
  affinity: |
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - gel_read
          topologyKey: topology.kubernetes.io/zone

gateway:
  replicas: 3
  extraEnv:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/gel_secrets/gcp_service_account.json"
  extraVolumeMounts:
    - name: gel-secrets
      mountPath: "/etc/gel_secrets"
  extraVolumes:
    - name: gel-secrets
      secret:
        secretName: gel-secrets
        items:
        - key: gel_license.jwt
          path: license.jwt
        - key: gcp_service_account.json
          path: gcp_service_account.json
  affinity: |
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - gel_gateway
          topologyKey: topology.kubernetes.io/zone
  service:
    type: LoadBalancer
    loadBalancerIP: ${loadbalancer_ip}
  nginxConfig:
    file: |
      worker_processes  5;  ## Default: 1
      error_log  /dev/stderr;
      pid        /tmp/nginx.pid;
      worker_rlimit_nofile 8192;
      events {
        worker_connections  4096;  ## Default: 1024
      }
      http {
        client_body_temp_path /tmp/client_temp;
        proxy_temp_path       /tmp/proxy_temp_path;
        fastcgi_temp_path     /tmp/fastcgi_temp;
        uwsgi_temp_path       /tmp/uwsgi_temp;
        scgi_temp_path        /tmp/scgi_temp;
        proxy_http_version    1.1;
        default_type application/octet-stream;
        log_format   main '$remote_addr - $remote_user [$time_local]  $status '
              '"$request" $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for"';
        access_log   /dev/stderr  main;
        sendfile     on;
        tcp_nopush   on;
        resolver kube-dns.kube-system.svc.cluster.local;
        server {
          listen             8080;
          location = / {
            return 200 'OK';
            auth_basic off;
          }
          location = /api/prom/push {
            set $auth_bearer $http_authorization;

            proxy_hide_header authorization;

            if ($auth_bearer ~ "^Bearer (.+)$" ) { 
              set $auth_bearer "Bearer $http_x_scope_orgid:$1";
            }
            proxy_set_header authorization $auth_bearer;

            proxy_pass       http://enterprise-logs-write.default.svc.cluster.local:3100$request_uri;
          }
          location = /api/prom/tail {
            set $auth_bearer $http_authorization;

            proxy_hide_header authorization;

            if ($auth_bearer ~ "^Bearer (.+)$" ) { 
              set $auth_bearer "Bearer $http_x_scope_orgid:$1";
            }
            proxy_set_header authorization $auth_bearer;

            proxy_pass       http://enterprise-logs-read.default.svc.cluster.local:3100$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
          }
          location ~ /api/prom/.* {
            set $auth_bearer $http_authorization;

            proxy_hide_header authorization;

            if ($auth_bearer ~ "^Bearer (.+)$" ) { 
              set $auth_bearer "Bearer $http_x_scope_orgid:$1";
            }
            proxy_set_header authorization $auth_bearer;

            proxy_pass       http://enterprise-logs-read.default.svc.cluster.local:3100$request_uri;
          }
          location ~ /prometheus/api/v1/alerts.* {
            set $auth_bearer $http_authorization;

            proxy_hide_header authorization;

            if ($auth_bearer ~ "^Bearer (.+)$" ) { 
              set $auth_bearer "Bearer $http_x_scope_orgid:$1";
            }
            proxy_set_header authorization $auth_bearer;

            proxy_pass       http://enterprise-logs-read.default.svc.cluster.local:3100$request_uri;
          }
          location ~ /prometheus/api/v1/rules.* {
            set $auth_bearer $http_authorization;

            proxy_hide_header authorization;

            if ($auth_bearer ~ "^Bearer (.+)$" ) { 
              set $auth_bearer "Bearer $http_x_scope_orgid:$1";
            }
            proxy_set_header authorization $auth_bearer;

            proxy_pass       http://enterprise-logs-read.default.svc.cluster.local:3100$request_uri;
          }
          location = /loki/api/v1/push {
            set $auth_bearer $http_authorization;

            proxy_hide_header authorization;

            if ($auth_bearer ~ "^Bearer (.+)$" ) { 
              set $auth_bearer "Bearer $http_x_scope_orgid:$1";
            }
            proxy_set_header authorization $auth_bearer;

            proxy_pass       http://enterprise-logs-write.default.svc.cluster.local:3100$request_uri;
          }
          location = /loki/api/v1/tail {
            set $auth_bearer $http_authorization;

            proxy_hide_header authorization;

            if ($auth_bearer ~ "^Bearer (.+)$" ) { 
              set $auth_bearer "Bearer $http_x_scope_orgid:$1";
            }
            proxy_set_header authorization $auth_bearer;

            proxy_pass       http://enterprise-logs-read.default.svc.cluster.local:3100$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
          }
          location ~ /loki/api/.* {
            set $auth_bearer $http_authorization;

            proxy_hide_header authorization;

            if ($auth_bearer ~ "^Bearer (.+)$" ) { 
              set $auth_bearer "Bearer $http_x_scope_orgid:$1";
            }
            proxy_set_header authorization $auth_bearer;

            proxy_pass       http://enterprise-logs-read.default.svc.cluster.local:3100$request_uri;
          }
          location ~ /admin/api/.* {
            proxy_pass       http://enterprise-logs-write.default.svc.cluster.local:3100$request_uri;
          }
          location ~ /compactor/.* {
            proxy_pass       http://enterprise-logs-read.default.svc.cluster.local:3100$request_uri;
          }
          location ~ /distributor/.* {
            proxy_pass       http://enterprise-logs-write.default.svc.cluster.local:3100$request_uri;
          }
          location ~ /ring {
            proxy_pass       http://enterprise-logs-write.default.svc.cluster.local:3100$request_uri;
          }
          location ~ /ingester/.* {
            proxy_pass       http://enterprise-logs-write.default.svc.cluster.local:3100$request_uri;
          }
          location ~ /ruler/.* {
            proxy_pass       http://enterprise-logs-read.default.svc.cluster.local:3100$request_uri;
          }
          location ~ /scheduler/.* {
            proxy_pass       http://enterprise-logs-read.default.svc.cluster.local:3100$request_uri;
          }
        }
      }


monitoring:
  selfMonitoring:
    enabled: false
    grafanaAgent:
      installOperator: false
  serviceMonitor:
    enabled: false