enterprise:
  enabled: true

alertmanager:
  persistentVolume:
    enabled: true
  replicas: 1
  statefulSet:
    enabled: true
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/gem_secrets/gcp_service_account.json"
  extraVolumeMounts:
  - name: gem-secrets
    mountPath: "/etc/gem_secrets"
  extraVolumes:
  - name: gem-secrets
    secret:
      secretName: gem-secrets
      items:
      - key: gem_license.jwt
        path: license.jwt
      - key: gcp_service_account.json
        path: gcp_service_account.json

compactor:
  replicas: 3
  persistentVolume:
    size: 50Gi
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/gem_secrets/gcp_service_account.json"
  extraVolumeMounts:
  - name: gem-secrets
    mountPath: "/etc/gem_secrets"
  extraVolumes:
  - name: gem-secrets
    secret:
      secretName: gem-secrets
      items:
      - key: gem_license.jwt
        path: license.jwt
      - key: gcp_service_account.json
        path: gcp_service_account.json
  affinity: 
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - compactor
          topologyKey: topology.kubernetes.io/zone

distributor:
  replicas: 3
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/gem_secrets/gcp_service_account.json"
  extraVolumeMounts:
  - name: gem-secrets
    mountPath: "/etc/gem_secrets"
  extraVolumes:
  - name: gem-secrets
    secret:
      secretName: gem-secrets
      items:
      - key: gem_license.jwt
        path: license.jwt
      - key: gcp_service_account.json
        path: gcp_service_account.json
  affinity: 
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - distributor
          topologyKey: topology.kubernetes.io/zone

ingester:
  persistentVolume:
    size: 50Gi
  replicas: 3
  affinity: 
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - ingester
          topologyKey: topology.kubernetes.io/zone
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/gem_secrets/gcp_service_account.json"
  extraVolumeMounts:
  - name: gem-secrets
    mountPath: "/etc/gem_secrets"
  extraVolumes:
  - name: gem-secrets
    secret:
      secretName: gem-secrets
      items:
      - key: gem_license.jwt
        path: license.jwt
      - key: gcp_service_account.json
        path: gcp_service_account.json

chunks-cache:
  enabled: false
  replicas: 1

index-cache:
  enabled: false
  replicas: 1

metadata-cache:
  enabled: false

results-cache:
  enabled: false

minio:
  enabled: false

overrides_exporter:
  replicas: 1
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/gem_secrets/gcp_service_account.json"
  extraVolumeMounts:
  - name: gem-secrets
    mountPath: "/etc/gem_secrets"
  extraVolumes:
  - name: gem-secrets
    secret:
      secretName: gem-secrets
      items:
      - key: gem_license.jwt
        path: license.jwt
      - key: gcp_service_account.json
        path: gcp_service_account.json

querier:
  replicas: 3
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/gem_secrets/gcp_service_account.json"
  extraVolumeMounts:
  - name: gem-secrets
    mountPath: "/etc/gem_secrets"
  extraVolumes:
  - name: gem-secrets
    secret:
      secretName: gem-secrets
      items:
      - key: gem_license.jwt
        path: license.jwt
      - key: gcp_service_account.json
        path: gcp_service_account.json
  affinity: 
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - querier
          topologyKey: topology.kubernetes.io/zone

query_frontend:
  replicas: 3
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/gem_secrets/gcp_service_account.json"
  extraVolumeMounts:
  - name: gem-secrets
    mountPath: "/etc/gem_secrets"
  extraVolumes:
  - name: gem-secrets
    secret:
      secretName: gem-secrets
      items:
      - key: gem_license.jwt
        path: license.jwt
      - key: gcp_service_account.json
        path: gcp_service_account.json
  affinity: 
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - query-frontend
          topologyKey: topology.kubernetes.io/zone

ruler:
  replicas: 3
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/gem_secrets/gcp_service_account.json"
  extraVolumeMounts:
  - name: gem-secrets
    mountPath: "/etc/gem_secrets"
  extraVolumes:
  - name: gem-secrets
    secret:
      secretName: gem-secrets
      items:
      - key: gem_license.jwt
        path: license.jwt
      - key: gcp_service_account.json
        path: gcp_service_account.json
  affinity: 
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - ruler
          topologyKey: topology.kubernetes.io/zone

store_gateway:
  persistentVolume:
    size: 50Gi
  replicas: 3
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/gem_secrets/gcp_service_account.json"
  extraVolumeMounts:
  - name: gem-secrets
    mountPath: "/etc/gem_secrets"
  extraVolumes:
  - name: gem-secrets
    secret:
      secretName: gem-secrets
      items:
      - key: gem_license.jwt
        path: license.jwt
      - key: gcp_service_account.json
        path: gcp_service_account.json
  affinity: 
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - authproxy
          topologyKey: topology.kubernetes.io/zone

admin_api:
  replicas: 1
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/gem_secrets/gcp_service_account.json"
  extraVolumeMounts:
  - name: gem-secrets
    mountPath: "/etc/gem_secrets"
  extraVolumes:
  - name: gem-secrets
    secret:
      secretName: gem-secrets
      items:
      - key: gem_license.jwt
        path: license.jwt
      - key: gcp_service_account.json
        path: gcp_service_account.json

gateway:
  replicas: 3
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/gem_secrets/gcp_service_account.json"
  extraVolumeMounts:
  - name: gem-secrets
    mountPath: "/etc/gem_secrets"
  extraVolumes:
  - name: gem-secrets
    secret:
      secretName: gem-secrets
      items:
      - key: gem_license.jwt
        path: license.jwt
      - key: gcp_service_account.json
        path: gcp_service_account.json
  affinity: 
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - gateway
          topologyKey: topology.kubernetes.io/zone

tokengenJob:
  enable: true
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/gem_secrets/gcp_service_account.json"
  extraVolumeMounts:
  - name: gem-secrets
    mountPath: "/etc/gem_secrets"
  extraVolumes:
  - name: gem-secrets
    secret:
      secretName: gem-secrets
      items:
      - key: gem_license.jwt
        path: license.jwt
      - key: gcp_service_account.json
        path: gcp_service_account.json

mimir:
  # -- Base config file for Grafana Mimir and Grafana Enterprise Metrics. Contains Helm templates that are evaulated at install/upgrade.
  # To modify the resulting configuration, either copy and alter 'mimir.config' as a whole or use the 'mimir.structuredConfig' to add and modify certain YAML elements.
  config: |
    activity_tracker:
      filepath: /data/metrics-activity.log

    admin_api:
      leader_election:
        enabled: true
        ring:
          kvstore:
            store: "memberlist"

    admin_client:
      storage:
        type: gcs
        gcs:
          bucket_name: "${bucket_name_prefix}-admin"

    alertmanager:
      data_dir: /data
      enable_api: true
      external_url: /alertmanager

    alertmanager_storage:
      backend: gcs
      gcs:
        bucket_name: "${bucket_name_prefix}-ruler"

    auth:
      type: enterprise
      override:
        token: ${gem_tokengen_override}
      admin:
        oidc:
          issuer_url: ${oidc_issuer_url}
          access_policy_claim: "${oidc_access_policy_claim}"
          access_policy_regex: "(.*)"
    
    # This configures how the store-gateway synchronizes blocks stored in the bucket. It uses Minio by default for getting started (configured via flags) but this should be changed for production deployments.
    blocks_storage:
      backend: gcs
      bucket_store:
        {{- if index .Values "chunks-cache" "enabled" }}
        chunks_cache:
          backend: memcached
          memcached:
            addresses: {{ include "mimir.chunksCacheAddress" . }}
            max_item_size: {{ mul (index .Values "chunks-cache").maxItemMemory 1024 1024 }}
            timeout: 450ms
        {{- end }}
        {{- if index .Values "index-cache" "enabled" }}
        index_cache:
          backend: memcached
          memcached:
            addresses: {{ include "mimir.indexCacheAddress" . }}
            max_item_size: {{ mul (index .Values "index-cache").maxItemMemory 1024 1024 }}
        {{- end }}
        {{- if index .Values "metadata-cache" "enabled" }}
        metadata_cache:
          backend: memcached
          memcached:
            addresses: {{ include "mimir.metadataCacheAddress" . }}
            max_item_size: {{ mul (index .Values "metadata-cache").maxItemMemory 1024 1024 }}
        {{- end }}
        sync_dir: /data/tsdb-sync
      gcs:
        bucket_name: "${bucket_name_prefix}-tsdb"
      tsdb:
        dir: /data/tsdb

    cluster_name: ${gem_cluster_name}

    compactor:
      data_dir: "/data"

    frontend:
      align_queries_with_step: true
      log_queries_longer_than: 10s
      {{- if index .Values "results-cache" "enabled" }}
      results_cache:
        backend: memcached
        memcached:
          addresses: {{ include "mimir.resultsCacheAddress" . }}
          max_item_size: {{ mul (index .Values "results-cache").maxItemMemory 1024 1024 }}
      cache_results: true
      {{- end }}

    frontend_worker:
      frontend_address: {{ template "mimir.fullname" . }}-query-frontend-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverGrpcListenPort" . }}

    {{- if .Values.gateway.useDefaultProxyURLs }}
    gateway:
      proxy:
        admin_api:
          url: http://{{ template "mimir.fullname" . }}-admin-api.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        alertmanager:
          url: http://{{ template "mimir.fullname" . }}-alertmanager.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        compactor:
          url: http://{{ template "mimir.fullname" . }}-compactor.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        default:
          url: http://{{ template "mimir.fullname" . }}-admin-api.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        distributor:
          url: dns:///{{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ include "mimir.serverGrpcListenPort" . }}
        ingester:
          url: http://{{ template "mimir.fullname" . }}-ingester.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        query_frontend:
          url: http://{{ template "mimir.fullname" . }}-query-frontend.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        ruler:
          url: http://{{ template "mimir.fullname" . }}-ruler.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        store_gateway:
          url: http://{{ template "mimir.fullname" . }}-store-gateway.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
    {{- end }}

    ingester:
      ring:
        final_sleep: 0s
        num_tokens: 512
        unregister_on_shutdown: false

    ingester_client:
      grpc_client_config:
        max_recv_msg_size: 104857600
        max_send_msg_size: 104857600
    instrumentation:
      enabled: true
      distributor_client:
        address: dns:///{{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ include "mimir.serverGrpcListenPort" . }}

    license:
      path: "/etc/gem_secrets/license.jwt"

    limits: {}

    memberlist:
      abort_if_cluster_join_fails: false
      compression_enabled: false
      join_members:
      - {{ include "mimir.fullname" . }}-gossip-ring

    ruler:
      alertmanager_url: dnssrvnoa+http://_http-metrics._tcp.{{ template "mimir.fullname" . }}-alertmanager-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}/alertmanager
      enable_api: true
      rule_path: /data

    ruler_storage:
      backend: gcs
      gcs:
        bucket_name: "${bucket_name_prefix}-ruler"

    runtime_config:
      file: /var/{{ include "mimir.name" . }}/runtime.yaml

    server:
      grpc_server_max_concurrent_streams: 1000
